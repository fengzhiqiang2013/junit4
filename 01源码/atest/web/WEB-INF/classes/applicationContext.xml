<?xml version="1.0" encoding="UTF-8"?> 
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
            http://www.springframework.org/schema/mvc  
            http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd  
            http://www.springframework.org/schema/context  
            http://www.springframework.org/schema/context/spring-context-3.0.xsd  
            http://www.springframework.org/schema/aop  
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
            http://www.springframework.org/schema/tx  
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd "> 

	<!-- 自动扫描 -->  
    <context:component-scan base-package="com" />  
    <!-- 引入配置文件 -->  
    <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:props/config.properties" />  
    </bean>  
  	
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
        <property name="driverClassName" value="${dataSource.driverClass}" />  
        <property name="url" value="${dataSource.jdbcUrl}" />  
        <property name="username" value="${dataSource.user}" />  
        <property name="password" value="${dataSource.password}" />  
        <!-- 初始化连接大小 -->  
        <property name="initialSize" value="${dataSource.initialPoolSize}"></property>  
        <!-- 连接池最大数量 -->  
        <property name="maxActive" value="${dataSource.maxPoolSize}"></property>  
        <!-- 连接池最大空闲 -->  
        <property name="maxIdle" value="${dataSource.maxIdle}"></property>  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="${dataSource.minIdle}"></property>  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="${dataSource.maxWait}"></property>  
    </bean>  
  
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:com/tapa/ssm/mapper/*.xml"></property>  
    </bean>  
  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.tapa.ssm.mapper" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
    
  	<!-- redis服务器中心 -->
  	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
  		<property name="maxTotal" ref="${cache.redis.maxActive}" />
        <property name="maxIdle" value="${cache.redis.maxIdle}" />
        <property name="maxWaitMillis" value="${cache.redis.maxWait}" />
        <property name="testOnBorrow" value="${cache.redis.testOnBorrow}" />
  	</bean>
  	<bean id="redisConnectionFactory"
        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="usePool" value="true"></property>
        <property name="hostName" value="${cache.redis.host}" />
        <property name="port" value="${cache.redis.port}" />
        <property name="password" value="${cache.redis.password}" />
        <property name="timeout" value="${cache.redis.timeout}" />
        <property name="database" value="${cache.redis.db}"></property>
        <constructor-arg index="0" ref="jedisPoolConfig" />
    </bean>
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="redisConnectionFactory" />
        <!-- 如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 -->
        <property name="keySerializer">
        	<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
    </bean>
        
    
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager"> 
        <tx:attributes> 
            <tx:method name="add*" propagation="REQUIRED" /> 
            <tx:method name="append*" propagation="REQUIRED" /> 
            <tx:method name="insert*" propagation="REQUIRED" /> 
            <tx:method name="save*" propagation="REQUIRED" /> 
            <tx:method name="update*" propagation="REQUIRED" /> 
            <tx:method name="modify*" propagation="REQUIRED" /> 
            <tx:method name="edit*" propagation="REQUIRED" /> 
            <tx:method name="delete*" propagation="REQUIRED" /> 
            <tx:method name="remove*" propagation="REQUIRED" /> 
            <tx:method name="repair" propagation="REQUIRED" /> 
            <tx:method name="delAndRepair" propagation="REQUIRED" /> 
   
            <tx:method name="get*" propagation="SUPPORTS" /> 
            <tx:method name="find*" propagation="SUPPORTS" /> 
            <tx:method name="load*" propagation="SUPPORTS" /> 
            <tx:method name="search*" propagation="SUPPORTS" /> 
            <tx:method name="datagrid*" propagation="SUPPORTS" /> 
   
            <tx:method name="*" propagation="SUPPORTS" /> 
        </tx:attributes> 
    </tx:advice> 
    <aop:config> 
        <aop:pointcut id="transactionPointcut" expression="execution(* com.tapa.ssm.service.impl.*.*(..))" /> 
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" /> 
    </aop:config> 

</beans>